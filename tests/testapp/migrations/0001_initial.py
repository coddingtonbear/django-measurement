# Generated by Django 3.0.5 on 2020-04-22 12:55

import django.core.validators
from django.db import migrations, models

import django_measurement.models

import measurement.measures.geometry
import measurement.measures.time
from measurement.measures import Distance, Mass, Speed, Temperature


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MeasurementTestModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "measurement_distance",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure=measurement.measures.geometry.Distance,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Distance(mile="1")
                            ),
                            django.core.validators.MaxValueValidator(
                                Distance(mile="3")
                            ),
                        ],
                    ),
                ),
                (
                    "measurement_mass",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure=measurement.measures.mechanics.Mass,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Mass(gram="1E+3")),
                            django.core.validators.MaxValueValidator(Mass(gram="3E+3")),
                        ],
                    ),
                ),
                (
                    "measurement_speed",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure=measurement.measures.mechanics.Speed,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Speed(mph="1")),
                            django.core.validators.MaxValueValidator(Speed(mph="3")),
                        ],
                    ),
                ),
                (
                    "measurement_temperature",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure=measurement.measures.temperature.Temperature,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Temperature(celsius="1.00")
                            ),
                            django.core.validators.MaxValueValidator(
                                Temperature(celsius="3.00")
                            ),
                        ],
                    ),
                ),
                (
                    "measurement_temperature2",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure="Temperature",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Temperature(celsius="1.00")
                            ),
                            django.core.validators.MaxValueValidator(
                                Temperature(celsius="3.00")
                            ),
                        ],
                    ),
                ),
                (
                    "measurement_speed_mph",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure=measurement.measures.mechanics.Speed,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Speed(mph="1")),
                            django.core.validators.MaxValueValidator(Speed(mph="3")),
                        ],
                    ),
                ),
                (
                    "measurement_custom_degree_per_time",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure=measurement.measures.mechanics.VolumetricFlowRate,
                        null=True,
                    ),
                ),
                (
                    "measurement_custom_temperature",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure=measurement.measures.temperature.Temperature,
                        null=True,
                    ),
                ),
                (
                    "measurement_custom_time",
                    django_measurement.models.MeasurementField(
                        blank=True,
                        decimal_places=3,
                        max_digits=28,
                        measure=measurement.measures.time.Time,
                        null=True,
                    ),
                ),
            ],
        ),
    ]
